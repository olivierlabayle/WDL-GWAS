var documenterSearchIndex = {"docs":
[{"location":"tutorials/local_run/#Running-WDL-GWAS-Locally","page":"WDL-GWAS Locally","title":"Running WDL-GWAS Locally","text":"","category":"section"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"In this example, we demonstrate how to run the workflow locally, we thus assume the the installation step was successful and that CROMWELL_PATH points to the cromwell jar file.","category":"page"},{"location":"tutorials/ukb_run/#Running-WDL-GWAS-on-the-UK-Biobank-RAP","page":"WDL-GWAS on UKBiobank RAP","title":"Running WDL-GWAS on the UK Biobank RAP","text":"","category":"section"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"First you need to compile the WDL workflow and upload it to the RAP, this can be done with the following:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"java -jar $DX_COMPILER_PATH compile rap_workflows/gwas/workflow.wdl \\\n-f -project $PROJECT_ID \\\n-reorg \\\n-folder /workflows/gwas \\\n-inputs rap_workflows/gwas/inputs.json","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"where the DX_COMPILER_PATH and PROJECT_ID have to be set appropriately. The compiler might output some warnings like missing input for non-optional parameter but you can ignore these.","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"warning: Updating workflows\nAt this point in time it seems like compiling multiple times the same workflow does not replace the old files. You will need to manually erase them from the RAP.","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"Then, you can run the workflow with the following command","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"dx run -y \\\n-f rap_workflows/gwas/inputs.dx.json \\\n--priority high \\\n--destination /gwas_outputs_covid_meta/ \\\n/workflows/gwas/gwas","category":"page"},{"location":"tutorials/ukb_run/#Outputs","page":"WDL-GWAS on UKBiobank RAP","title":"Outputs","text":"","category":"section"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"Outputs will be stored in the /gwas_outputs/ folder. There will be many files as I haven't figured out how to organise them yet. You can filter them to access, as a few examples:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"plots: searching for png\ngroup/phenotype results: searching for regenie.results.${group_name}.${phenotype}.tsv","category":"page"},{"location":"contributing/#Contributing-and-Reporting","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"","category":"section"},{"location":"contributing/#Contact","page":"Contributing and Reporting","title":"Contact","text":"","category":"section"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"In order to report a bug, ask for a feature request or say hello, please fill an issue.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing and Reporting","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"Contributions are most welcome. This repository is organised as follows:","category":"page"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"The complete workflow is in workflow.wdl.\nAll dependencies are built within a docker image defined by docker/Dockerfile.\nThe \"glue\" code is written in Julia. Although contributions using other languages are acceptable, we prefer Julia as it keeps dependencies light and the repository clean.","category":"page"},{"location":"contributing/#Running-Tests","page":"Contributing and Reporting","title":"Running Tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"Running the tests locally requires a set of dependencies to be installed:","category":"page"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"Julia\nR\nSuSiE\nMETAL\nplink2\ncromwell.","category":"page"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"The tests further assume that the environment variable CROMWELL_PATH points to the cromwell jar file.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troobleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Running-Interactively-on-UKBiobank-RAP","page":"Troobleshooting","title":"Running Interactively on UKBiobank RAP","text":"","category":"section"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"To debug errors, it may be useful to run the code interactively, for this, you can use the Cloud Workstation. This tutorial may also be useful. To start an instance:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx run \\\n  --instance-type mem2_ssd1_v2_x8 \\\n  -imax_session_length=\"10h\" \\\n  -y \\\n  --ssh app-cloud_workstation","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"To import one or multiple files (typically input files for a failed step):","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx download FILE_ID_1 FILE_ID_2...","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"Then you can download the docker image and enter a container:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"docker run -it --rm -v $PWD:/mnt/data olivierlabayle/wdl-gwas:main /bin/bash","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"The current directory is mounted to /mnt/data. From there, work as usual, for instance to start a Julia REPL:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"julia --project=/opt/PopGen --sysimage=/opt/PopGen/sysimage.so --startup-file=no","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"You can upload generated data to your project with dx upload:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx upload --path \"$DX_PROJECT_CONTEXT_ID:\" <FILE>","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"Finally, when you are finished, terminate the job with the appropriate job-id:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx terminate job-J1V4870JpYQP94jgb33y45qP","category":"page"},{"location":"#WDL-GWAS","page":"Home","title":"WDL-GWAS","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"With the UK Biobank RAP now serving as the exclusive access point to UK Biobank data, conducting large-scale statistical genetics analyses has become more complex. This repository offers a fully reproducible WDL workflow (RAP-compatible) for genome-wide association studies and fine-mapping, designed to run seamlessly on the RAP and adaptable for use in other computing environments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: \"Workflow\")","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All dependencies require:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Java, which can be installed with sdkman.\nThis repository which you can obtain here.","category":"page"},{"location":"#Installation-for-Local-Usage","page":"Home","title":"Installation for Local Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Running the workflow locally requires cromwell, this page explains how to install it. Then, we recommend setting the environment variable CROMWELL_PATH to point to the newly downloaded jar file.","category":"page"},{"location":"#Installation-for-UK-Biobank-Usage","page":"Home","title":"Installation for UK Biobank Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to run the WDL-GWAS workflow on the UK Biobank RAP you need to setup dxCompiler. This requires a few things:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installing the dx toolkit.\nDownloading dxCompiler from the releases page. Then, we recommend setting the environment variable DX_COMPILER_PATH to point to the newly downloaded jar file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can then login using your credentials via:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dx login","category":"page"},{"location":"parameters/#Workflow-Parameters","page":"Workflow Parameters","title":"Workflow Parameters","text":"","category":"section"},{"location":"parameters/","page":"Workflow Parameters","title":"Workflow Parameters","text":"docker_image (default: olivierlabayle/wdl-gwas:main): The docker image used to run the workflow.\ncovariates_file: A CSV file containing the set of covariates and phenotypes. Missing values should be represented by empty fields.\ngenotypes: PLINK BED files.\nimputed_genotypes: PLINK PGEN files, split by chromosome.\ngroupby (default: []): A set of variables used to stratify individuals for which a GWAS will be run independently. If empty, the full dataset is used.\ncovariates (default: [\"AGE\", \"SEX\", \"AGExAGE\", \"AGExSEX\"]): A set of covariates used to adjust for confounding or increase power in the association testing step. Product of variables can be defined using the _x_ syntax, for example: [\"AGE\", \"SEX\", \"AGExSEX\", \"AGExAGE\"].\nphenotypes: A set of phenotypes for which a GWAS will be run independently.\nmin_cases_controls (default: 10): Minimum number of phenotype cases/controls within a group to proceed to GWAS.\nhigh_ld_regions: File containing high LD regions to be excluded when performing LD pruning for PCA. The file is stored in assets/exclude_b38.txt and needs to be uploaded to the RAP.\nip_values (default: \"1000 50 0.05\"): Values used to create independent genotypes for PCA (see here).\nnpcs (default 10): Number of principal components to use to account for population structure.\napprox_pca (default: true): Whether to use an approximation to the PCA algorithm (see here).\nmaf (default: 0.01): Minor allele frequency threshold. This is used to filter variants for PCA and for plotting GWAS results. The association testing step is still performed across all variants.\nmac (default: 10): Minor allele count used to filter variants for PCA and entering REGENIE's variants.\nregenie_cv_folds (default: 5): Number of folds for Regenie step 1. Can also be loocv.\nregenie_bsize (default 1000): Regenie block size.","category":"page"},{"location":"parameters/","page":"Workflow Parameters","title":"Workflow Parameters","text":"For Regenie's options see the online documentation.","category":"page"}]
}
