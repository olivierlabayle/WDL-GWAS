var documenterSearchIndex = {"docs":
[{"location":"tutorials/local_run/#Running-WDL-GWAS-Locally","page":"WDL-GWAS Locally","title":"Running WDL-GWAS Locally","text":"","category":"section"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"Expected Time: 30 minutes (mostly waiting for the run to finish)","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"In this example, we demonstrate how to run the workflow locally, we thus assume the installation step was successful and that CROMWELL_PATH points to the cromwell jar file.","category":"page"},{"location":"tutorials/local_run/#Describing-the-workflow's-inputs","page":"WDL-GWAS Locally","title":"Describing the workflow's inputs","text":"","category":"section"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"Inputs to the workflow can be provided via a json file. In this example, we will replicate one of the test runs. Importantly, we will perform the analysis as follows:","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"By group, defined by the SUPERPOPULATION column in the covariates file\nFor two phenotypes: SEVERE_PNEUMONIA and SEVERE_COVID_19 in the covariates file.\nThe gwas will use AGE, SEX and AGExSEX as extra covariates.\nThe groups results will further be meta-analysed (default if groupby is set) but exclude the \"AMR\" group from the meta-analysis stage.\nFor this test dataset, fine-mapping thresholds have been lowered to yield some results","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"For illustration, a subset of the JSON file can be found here:","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"{\n    \"gwas.meta_exclude\": [\"AMR\"],\n    \"gwas.covariates_file\": \"test/assets/covariates/covariates.csv\",\n    \"gwas.groupby\": [\"SUPERPOPULATION\"],\n    \"gwas.covariates\": [\"AGE\", \"SEX\", \"AGE_x_AGE\"],\n    \"gwas.phenotypes\": [\"SEVERE_PNEUMONIA\", \"SEVERE_COVID_19\"],\n    \"gwas.genotypes\": {\n        \"chr\": \"all\",\n        \"bed\": \"test/assets/genotypes/genotypes.arrays_wgs.aggregated.bed\",\n        \"bim\": \"test/assets/genotypes/genotypes.arrays_wgs.aggregated.bim\",\n        \"fam\": \"test/assets/genotypes/genotypes.arrays_wgs.aggregated.fam\"\n    },\n    \"gwas.imputed_genotypes\": [\n        {\n            \"chr\": \"1\",\n            \"pgen\": \"test/assets/imputed/chr1.qced.pgen\",\n            \"psam\": \"test/assets/imputed/chr1.qced.psam\",\n            \"pvar\": \"test/assets/imputed/chr1.qced.pvar\"\n        },\n        {\n            \"chr\": \"2\",\n            \"pgen\": \"test/assets/imputed/chr2.qced.pgen\",\n            \"psam\": \"test/assets/imputed/chr2.qced.psam\",\n            \"pvar\": \"test/assets/imputed/chr2.qced.pvar\"\n        },\n        {\n            \"chr\": \"3\",\n            \"pgen\": \"test/assets/imputed/chr3.qced.pgen\",\n            \"psam\": \"test/assets/imputed/chr3.qced.psam\",\n            \"pvar\": \"test/assets/imputed/chr3.qced.pvar\"\n        }\n    ],\n}","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"Note that each chromosome file needs to be filled independently, the full configuration file can be found in config/local-inputs-example.json.","category":"page"},{"location":"tutorials/local_run/#Running-the-workflow","page":"WDL-GWAS Locally","title":"Running the workflow","text":"","category":"section"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"From the repository's root, simply run:","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"java \\\n    -jar ${CROMWELL_PATH} run workflow.wdl \\\n    --inputs config/local-inputs-example.json \\\n    --options config/local-options-examples.json","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"The --inputs provides the workflow's input files and parameters while the --options flag provides other cromwell's options, here the workflow's output directory.","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"If you are running on macOS, the above will error because docker won't find a suitable image for your platform. You will need to change the cromwell's configuration, and you can for instance use the following config:","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"java \\\n    -Dconfig.file=config/cromwell.macOS.conf \\\n    -jar ${CROMWELL_PATH} run workflow.wdl \\\n    --inputs config/local-inputs-example.json \\\n    --options config/local-options-examples.json","category":"page"},{"location":"tutorials/local_run/#Outputs","page":"WDL-GWAS Locally","title":"Outputs","text":"","category":"section"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"The outputs will be found in the gwas_outputs directory. For example the poorly populated meta-analysis QQ plot for SEVERE_COVID_19, but well it is only a test dataset.","category":"page"},{"location":"tutorials/local_run/","page":"WDL-GWAS Locally","title":"WDL-GWAS Locally","text":"(Image: \"Severe Covid 19 QQ\")","category":"page"},{"location":"tutorials/ukb_run/#Running-WDL-GWAS-on-the-UK-Biobank-RAP","page":"WDL-GWAS on UKBiobank RAP","title":"Running WDL-GWAS on the UK Biobank RAP","text":"","category":"section"},{"location":"tutorials/ukb_run/#Describing-the-Inputs","page":"WDL-GWAS on UKBiobank RAP","title":"Describing the Inputs","text":"","category":"section"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"As per the Running WDL-GWAS Locally example, the workflow's inputs are provided via a JSON file. However this time, the file paths need to point to teir location in your UK Biobank RAP project. There are two main ways you can fill those in:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"Via object identifiers: dx://RAP_PROJECT_ID:FILE_ID\nVia a file path: dx://RAP_PROJECT_ID:/path/to/file","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"An ecample inputs JSON file could look like:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"{\n    \"gwas.meta_exclude\": [\"AMR\"],\n    \"gwas.covariates_file\": \"dx://RAP_PROJECT_ID:/path/to/covariates/file\",\n    \"gwas.groupby\": [\"SUPERPOPULATION\"],\n    \"gwas.covariates\": [\"AGE\", \"SEX\", \"AGE_x_AGE\"],\n    \"gwas.phenotypes\": [\"SEVERE_PNEUMONIA\", \"SEVERE_COVID_19\"],\n    \"gwas.genotypes\": {\n        \"chr\": \"all\",\n        \"bed\": \"dx://RAP_PROJECT_ID:/path/to/bed/file\",\n        \"bim\": \"dx://RAP_PROJECT_ID:/path/to/bim/file\",\n        \"fam\": \"dx://RAP_PROJECT_ID:/path/to/fam/file\"\n    },\n    \"gwas.imputed_genotypes\": [\n        {\n            \"chr\": \"1\",\n            \"pgen\": \"dx://RAP_PROJECT_ID:PGEN_CHR_1_FILE_ID\",\n            \"psam\": \"dx://RAP_PROJECT_ID:PSAM_CHR_1_FILE_ID\",\n            \"pvar\": \"dx://RAP_PROJECT_ID:PVAR_CHR_1_FILE_ID\"\n        },\n        {\n            \"chr\": \"2\",\n            \"pgen\": \"dx://RAP_PROJECT_ID:PGEN_CHR_2_FILE_ID\",\n            \"psam\": \"dx://RAP_PROJECT_ID:PSAM_CHR_2_FILE_ID\",\n            \"pvar\": \"dx://RAP_PROJECT_ID:PVAR_CHR_2_FILE_ID\"\n        },\n        {\n            \"chr\": \"3\",\n            \"pgen\": \"dx://RAP_PROJECT_ID:PGEN_CHR_3_FILE_ID\",\n            \"psam\": \"dx://RAP_PROJECT_ID:PSAM_CHR_3_FILE_ID\",\n            \"pvar\": \"dx://RAP_PROJECT_ID:PVAR_CHR_3_FILE_ID\"\n        },\n    ],\n}","category":"page"},{"location":"tutorials/ukb_run/#Running-the-Workflow","page":"WDL-GWAS on UKBiobank RAP","title":"Running the Workflow","text":"","category":"section"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"First you need to compile the workflow and upload it to the RAP, this can be done with dxCompiler:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"java -jar $DX_COMPILER_PATH compile rap_workflows/gwas/workflow.wdl \\\n-f -project $RAP_PROJECT_ID \\\n-reorg \\\n-folder /workflows/gwas \\\n-inputs inputs.json","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"where:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"DX_COMPILER_PATH is set as per the installation's instruction.\nRAP_PROJECT_ID is your UK Biobank RAP project ID.\ninputs.json is your workflow's input file. ","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"The compiler might output some warnings like missing input for non-optional parameter but you can ignore these.","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"The command will do a few things:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"It will compile and upload the workflow to the UK Biobank RAP \nIt will create a corresponding inputs.dx.json file locally which can be used to run the workflow ","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"Then, to run the workflow, run:","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"dx run -y \\\n-f inputs.dx.json \\\n--priority high \\\n--destination /workflow_outputs/ \\\n/workflows/gwas/gwas","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"Of course you can change the destination /workflow_outputs to your need. You should be able to visualize the run execution on your UK Biobank RAP account under the MONITOR tab.","category":"page"},{"location":"tutorials/ukb_run/#Outputs","page":"WDL-GWAS on UKBiobank RAP","title":"Outputs","text":"","category":"section"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"Outputs will be stored in the /workflow_outputs// folder. Since the RAP preserves intermediate files, this will be quite dense.","category":"page"},{"location":"tutorials/ukb_run/","page":"WDL-GWAS on UKBiobank RAP","title":"WDL-GWAS on UKBiobank RAP","text":"plots: searching for png\ngroup/phenotype results: searching for regenie.results.${group_name}.${phenotype}.tsv","category":"page"},{"location":"contributing/#Contributing-and-Reporting","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"","category":"section"},{"location":"contributing/#Contact","page":"Contributing and Reporting","title":"Contact","text":"","category":"section"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"In order to report a bug, ask for a feature request or say hello, please fill an issue.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing and Reporting","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"Contributions are most welcome. This repository is organised as follows:","category":"page"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"The complete workflow is in workflow.wdl.\nAll dependencies are built within a docker image defined by docker/Dockerfile.\nThe \"glue\" code is written in Julia. Although contributions using other languages are acceptable, we prefer Julia as it keeps dependencies light and the repository clean.","category":"page"},{"location":"contributing/#Running-Tests","page":"Contributing and Reporting","title":"Running Tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"Running the tests locally requires a set of dependencies to be installed:","category":"page"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"Julia\nR\nSuSiE\nMETAL\nplink2\ncromwell.","category":"page"},{"location":"contributing/","page":"Contributing and Reporting","title":"Contributing and Reporting","text":"The tests further assume that the environment variable CROMWELL_PATH points to the cromwell jar file.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troobleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Understanding-Local-Workflow-failures","page":"Troobleshooting","title":"Understanding Local Workflow failures","text":"","category":"section"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"Cromwell's logs are quite dense and difficult to navigate, when the workflow errors, look for a filename ending in execution/stderr. This file will contain more information on the error.","category":"page"},{"location":"troubleshooting/#Running-Interactively-on-UKBiobank-RAP","page":"Troobleshooting","title":"Running Interactively on UKBiobank RAP","text":"","category":"section"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"To debug errors, it may be useful to run the code interactively, for this, you can use the Cloud Workstation. This tutorial may also be useful. To start an instance:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx run \\\n  --instance-type mem2_ssd1_v2_x8 \\\n  -imax_session_length=\"10h\" \\\n  -y \\\n  --ssh app-cloud_workstation","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"To import one or multiple files (typically input files for a failed step):","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx download FILE_ID_1 FILE_ID_2...","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"Then you can download the docker image and enter a container:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"docker run -it --rm -v $PWD:/mnt/data olivierlabayle/wdl-gwas:main /bin/bash","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"The current directory is mounted to /mnt/data. From there, work as usual, for instance to start a Julia REPL:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"julia --project=/opt/PopGen --sysimage=/opt/PopGen/sysimage.so --startup-file=no","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"You can upload generated data to your project with dx upload:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx upload --path \"$DX_PROJECT_CONTEXT_ID:\" <FILE>","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"Finally, when you are finished, terminate the job with the appropriate job-id:","category":"page"},{"location":"troubleshooting/","page":"Troobleshooting","title":"Troobleshooting","text":"dx terminate job-J1V4870JpYQP94jgb33y45qP","category":"page"},{"location":"#WDL-GWAS","page":"Home","title":"WDL-GWAS","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"With the UK Biobank RAP now serving as the exclusive access point to UK Biobank data, conducting large-scale statistical genetics analyses has become more complex. This repository offers a fully reproducible WDL workflow (RAP-compatible) for genome-wide association studies and fine-mapping, designed to run seamlessly on the RAP and adaptable for use in other computing environments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: \"Workflow\")","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The workflow ca be run on linux platforms and macOS. However, for the later, you will need to change the local backend provider to run the workflow locally (see: Running WDL-GWAS Locally).","category":"page"},{"location":"","page":"Home","title":"Home","text":"All dependencies require:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Java, which can be installed with sdkman.\nDocker\nThis repository which you can obtain here.","category":"page"},{"location":"#Installation-for-Local-Usage","page":"Home","title":"Installation for Local Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Running the workflow locally requires cromwell, this page explains how to install it. Then, we recommend setting the environment variable CROMWELL_PATH to point to the newly downloaded jar file.","category":"page"},{"location":"#Installation-for-UK-Biobank-Usage","page":"Home","title":"Installation for UK Biobank Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to run the WDL-GWAS workflow on the UK Biobank RAP you need to setup dxCompiler. This requires a few things:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installing the dx toolkit.\nDownloading dxCompiler from the releases page. Then, we recommend setting the environment variable DX_COMPILER_PATH to point to the newly downloaded jar file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can then login using your credentials via:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dx login","category":"page"},{"location":"parameters/#Workflow-Parameters","page":"Workflow Parameters","title":"Workflow Parameters","text":"","category":"section"},{"location":"parameters/","page":"Workflow Parameters","title":"Workflow Parameters","text":"docker_image (default: olivierlabayle/wdl-gwas:main): The docker image used to run the workflow.\ncovariates_file: A CSV file containing the set of covariates and phenotypes. Missing values should be represented by empty fields.\ngenotypes: PLINK BED files.\nimputed_genotypes: PLINK PGEN files, split by chromosome.\ngroupby (default: []): A set of variables used to stratify individuals for which a GWAS will be run independently. If empty, the full dataset is used.\ncovariates (default: [\"AGE\", \"SEX\", \"AGExAGE\", \"AGExSEX\"]): A set of covariates used to adjust for confounding or increase power in the association testing step. Product of variables can be defined using the _x_ syntax, for example: [\"AGE\", \"SEX\", \"AGExSEX\", \"AGExAGE\"].\nphenotypes: A set of phenotypes for which a GWAS will be run independently.\nmin_cases_controls (default: 10): Minimum number of phenotype cases/controls within a group to proceed to GWAS.\nip_values (default: \"1000 50 0.05\"): Values used to create independent genotypes for PCA (see here).\nnpcs (default 10): Number of principal components to use to account for population structure.\napprox_pca (default: true): Whether to use an approximation to the PCA algorithm (see here).\nmaf (default: 0.01): Minor allele frequency threshold. This is used to filter variants for PCA and for plotting GWAS results. The association testing step is still performed across all variants.\nmac (default: 10): Minor allele count used to filter variants for PCA and entering REGENIE's variants.\nregenie_cv_folds (default: 5): Number of folds for Regenie step 1. Can also be loocv.\nregenie_bsize (default 1000): Regenie block size.","category":"page"},{"location":"parameters/","page":"Workflow Parameters","title":"Workflow Parameters","text":"For Regenie's options see the online documentation.","category":"page"}]
}
